{"version":3,"file":"ngx-ui-loader.service.d.ts","sources":["ngx-ui-loader.service.d.ts"],"names":[],"mappingssourcesContent":["import { Observable } from 'rxjs';\nimport { NgxUiLoaderConfig } from './ngx-ui-loader-config';\nimport { Loaders, Loader, ShowEvent, Task } from './ngx-ui-loader.interfaces';\nexport declare class NgxUiLoaderService {\n    private config;\n    /**\n     * For internal use only. It may be changed in the future.\n     * @docs-private\n     */\n    backgroundClosing$: Observable<ShowEvent>;\n    /**\n     * For internal use only. It may be changed in the future.\n     * @docs-private\n     */\n    foregroundClosing$: Observable<ShowEvent>;\n    /**\n     * For internal use only. It may be changed in the future.\n     * @docs-private\n     */\n    showBackground$: Observable<ShowEvent>;\n    /**\n     * For internal use only. It may be changed in the future.\n     * @docs-private\n     */\n    showForeground$: Observable<ShowEvent>;\n    private bgClosing;\n    private defaultConfig;\n    private fgClosing;\n    private loaders;\n    private showBackground;\n    private showForeground;\n    /**\n     * Constructor\n     * @param config\n     */\n    constructor(config: NgxUiLoaderConfig);\n    /**\n     * For internal use only. It may be changed in the future.\n     * @docs-private\n     */\n    initLoaderData(loaderId: string): void;\n    /**\n     * For internal use only. It may be changed in the future.\n     * @docs-private\n     */\n    updateLoaderId(loaderId: string, newLoaderId: string): void;\n    /**\n     * For internal use only. It may be changed in the future.\n     * @docs-private\n     */\n    destroyLoaderData(loaderId: string): void;\n    /**\n     * Get default loader configuration\n     * @returns default configuration object\n     */\n    getDefaultConfig(): NgxUiLoaderConfig;\n    /**\n     * Get all the loaders\n     */\n    getLoaders(): Loaders;\n    /**\n     * Get data of a specified loader. If loaderId is not provided, it will return data of master loader(if existed)\n     */\n    getLoader(loaderId?: string): Loader;\n    /**\n     * @deprecated use getLoader() or getLoaders() instead. This will be removed in the version 8.x.x\n     * Return status of master loader\n     */\n    getStatus(): {\n        waitingBackground: Task;\n        waitingForeground: Task;\n    };\n    /**\n     * Check whether the queue has a waiting foreground loader with the given `taskId`.\n     * If no `taskId` specified, it will check whether the queue has any waiting foreground loader.\n     * @param loaderId the loader Id\n     * @param taskId the optional task Id\n     * @returns boolean\n     */\n    hasForeground(loaderId: string, taskId?: string): boolean;\n    /**\n     * Check whether the queue has a waiting background loader with the given `taskId`.\n     * If no `taskId` specified, it will check whether the queue has any waiting background loader.\n     * @param loaderId the loader Id\n     * @param taskId the optional task Id\n     * @returns boolean\n     */\n    hasBackground(loaderId: string, taskId?: string): boolean;\n    /**\n     * Start the foreground loading of loader having `loaderId` with a specified `taskId`.\n     * The loading is only closed off when all taskIds of that loader are called with stopLoader() method.\n     * @param loaderId the loader Id\n     * @param taskId the optional task Id of the loading. taskId is set to 'default' by default.\n     */\n    startLoader(loaderId: string, taskId?: string): void;\n    /**\n     * Start the foreground loading of master loader with a specified `taskId`.\n     * The loading is only closed off when all taskIds of that loader are called with stop() method.\n     * NOTE: Really this function just wraps startLoader() function\n     * @param taskId the optional task Id of the loading. taskId is set to 'default' by default.\n     */\n    start(taskId?: string): void;\n    /**\n     * Start the background loading of loader having `loaderId` with a specified `taskId`.\n     * The loading is only closed off when all taskIds of that loader are called with stopLoaderBackground() method.\n     * @param loaderId the loader Id\n     * @param taskId the optional task Id of the loading. taskId is set to 'default' by default.\n     */\n    startBackgroundLoader(loaderId: string, taskId?: string): void;\n    /**\n     * Start the background loading of master loader with a specified `taskId`.\n     * The loading is only closed off when all taskIds of that loader are called with stopBackground() method.\n     * NOTE: Really this function just wraps startBackgroundLoader() function\n     * @param taskId the optional task Id of the loading. taskId is set to 'default' by default.\n     */\n    startBackground(taskId?: string): void;\n    /**\n     * Stop a foreground loading of loader having `loaderId` with specific `taskId`\n     * @param loaderId the loader Id\n     * @param taskId the optional task Id to stop. If not provided, 'default' is used.\n     * @returns Object\n     */\n    stopLoader(loaderId: string, taskId?: string): void;\n    /**\n     * Stop a foreground loading of master loader with specific `taskId`\n     * @param taskId the optional task Id to stop. If not provided, 'default' is used.\n     * @returns Object\n     */\n    stop(taskId?: string): void;\n    /**\n     * Stop a background loading of loader having `loaderId` with specific `taskId`\n     * @param loaderId the loader Id\n     * @param taskId the optional task Id to stop. If not provided, 'default' is used.\n     * @returns Object\n     */\n    stopBackgroundLoader(loaderId: string, taskId?: string): void;\n    /**\n     * Stop a background loading of master loader with specific taskId\n     * @param taskId the optional task Id to stop. If not provided, 'default' is used.\n     * @returns Object\n     */\n    stopBackground(taskId?: string): void;\n    /**\n     * Stop all the background and foreground loadings of loader having `loaderId`\n     * @param loaderId the loader Id\n     */\n    stopLoaderAll(loaderId: string): void;\n    /**\n     * Stop all the background and foreground loadings of master loader\n     */\n    stopAll(): void;\n    /**\n     * Create loader data if it does not exist\n     * @param loaderId\n     * @param isMaster\n     * @param isBound\n     * @docs-private\n     */\n    private createLoaderData;\n    /**\n     * Throw error if the loaderId does not exist.\n     * @docs-private\n     */\n    private throwErrorIfLoaderNotExist;\n    /**\n     * Throw error if the loaderId has already existed.\n     * @docs-private\n     */\n    private throwErrorIfLoaderExists;\n    /**\n     * Throw error if the master loader has already existed.\n     * @docs-private\n     */\n    private throwErrorIfMasterLoaderExists;\n    /**\n     * Throw error if the master loader does not exist.\n     * @docs-private\n     */\n    private throwErrorIfMasterLoaderNotExist;\n    /**\n     * Manage to close foreground loading\n     * @param loaderId the loader id\n     */\n    private foregroundCloseout;\n    /**\n     * Manage to close background loading\n     * @param loaderId the loader id\n     */\n    private backgroundCloseout;\n}\n"]}